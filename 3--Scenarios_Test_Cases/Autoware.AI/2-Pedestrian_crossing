from environs import Env
import copy
import lgsvl
import time
import os

env = Env()

LGSVL__SIMULATOR_HOST = env.str("LGSVL__SIMULATOR_HOST", "127.0.0.1")
LGSVL__SIMULATOR_PORT = env.int("LGSVL__SIMULATOR_PORT", 8181)
LGSVL__AUTOPILOT_0_HOST = env.str("LGSVL__AUTOPILOT_0_HOST", "127.0.0.1")
LGSVL__AUTOPILOT_0_PORT = env.int("LGSVL__AUTOPILOT_0_PORT", 9090)

sim = lgsvl.Simulator(LGSVL__SIMULATOR_HOST, LGSVL__SIMULATOR_PORT)
sim.load(env.str("LGSVL__MAP"))

spawns = sim.get_spawn()
ego_state = lgsvl.AgentState()
ego_state.transform = spawns[0]
#ego_state.transform.position -=  20 * forward  #+ 4 * right
ego_state.transform.position = lgsvl.Vector(-3, 0, 25)
ego = sim.add_agent(env.str("LGSVL__VEHICLE_0"), lgsvl.AgentType.EGO, ego_state)
ego.connect_bridge(env.str("LGSVL__AUTOPILOT_0_HOST", lgsvl.wise.SimulatorSettings.bridge_host), env.int("LGSVL__AUTOPILOT_0_PORT", lgsvl.wise.SimulatorSettings.bridge_port))
print("Waiting for connection...")
while not ego.bridge_connected:
    time.sleep(1)

print("Bridge connected:", ego.bridge_connected)


npc_state = lgsvl.AgentState()
npc_state.transform = spawns[0]
#npc_state.transform.position =  npc_origin_pose
npc_state.transform.position = lgsvl.Vector(9, 0 , -40)
#npc_state.transform.rotation = lgsvl.Vector(0,180,0)

npc = sim.add_agent("Zoe", lgsvl.AgentType.PEDESTRIAN, npc_state)


#vehicles = {
 #   ego: "EGO",
  #  npc: "Sedan",
#}


# This block creates the list of waypoints that the NPC will follow
# Each waypoint is an position vector paired with the speed that the NPC will drive to it
#waypoints = []




waypoints = [
  lgsvl.WalkWaypoint(lgsvl.Vector(8.5,0,-41), 0, 0),
  lgsvl.WalkWaypoint(lgsvl.Vector(8.25,0,-48), 3, 25),
  lgsvl.WalkWaypoint(lgsvl.Vector(7.5,0,-56), 3, 0),
  lgsvl.WalkWaypoint(lgsvl.Vector(7,0,-65), 1, 0),
]




# When the NPC is within 0.5m of the waypoint, this will be called
def on_waypoint(agent, index):
    print("waypoint {} reached".format(index))

# The above function needs to be added to the list of callbacks for the NPC
npc.on_waypoint_reached(on_waypoint)

# The NPC needs to be given the list of waypoints.
# A bool can be passed as the 2nd argument that controls whether or not the NPC loops over the waypoints (default false)
npc.follow(waypoints)


sim.run(0)


