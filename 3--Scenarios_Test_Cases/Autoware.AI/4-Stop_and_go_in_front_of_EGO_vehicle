from environs import Env
import copy
import lgsvl
import time
import os

print("NPC waiting EGO gets closer")

env = Env()

LGSVL__SIMULATOR_HOST = env.str("LGSVL__SIMULATOR_HOST", "127.0.0.1")
LGSVL__SIMULATOR_PORT = env.int("LGSVL__SIMULATOR_PORT", 8181)
LGSVL__AUTOPILOT_0_HOST = env.str("LGSVL__AUTOPILOT_0_HOST", "127.0.0.1")
LGSVL__AUTOPILOT_0_PORT = env.int("LGSVL__AUTOPILOT_0_PORT", 9090)

sim = lgsvl.Simulator(LGSVL__SIMULATOR_HOST, LGSVL__SIMULATOR_PORT)
sim.load(env.str("LGSVL__MAP"))

spawns = sim.get_spawn()
forward = lgsvl.utils.transform_to_forward(spawns[0])
right = lgsvl.utils.transform_to_right(spawns[0])


ego_state = lgsvl.AgentState()
ego_state.transform = spawns[0]
#ego_state.transform.position -=  20 * forward  #+ 4 * right
ego_state.transform.position = lgsvl.Vector(-3, 0, 58)

ego = sim.add_agent(env.str("LGSVL__VEHICLE_0"), lgsvl.AgentType.EGO, ego_state)
ego.connect_bridge(env.str("LGSVL__AUTOPILOT_0_HOST", lgsvl.wise.SimulatorSettings.bridge_host), env.int("LGSVL__AUTOPILOT_0_PORT", lgsvl.wise.SimulatorSettings.bridge_port))
print("Waiting for connection...")
while not ego.bridge_connected:
    time.sleep(1)

print("Bridge connected:", ego.bridge_connected)


npc_origin_pose = lgsvl.Vector(-3, 0, 40)


npc_state = lgsvl.AgentState()
npc_state.transform = spawns[0]
npc_state.transform.position +=  npc_origin_pose
#npc_state.transform.position = lgsvl.Vector(-3, 0 , 42.5)

npc = sim.add_agent("Sedan", lgsvl.AgentType.NPC, npc_state)


#vehicles = {
 #   ego: "EGO",
  #  npc: "Sedan",
#}


# This block creates the list of waypoints that the NPC will follow
# Each waypoint is an position vector paired with the speed that the NPC will drive to it
waypoints = []


x_max = 2
z_delta = 20

layer_mask = 0
layer_mask |= 1 << 0  # 0 is the layer for the road (default)




for i in range(1,3):
    speed = 12  # if i % 2 == 0 else 12
    px = 0
    pz = (i + 1) * z_delta
    # Waypoint angles are input as Euler angles (roll, pitch, yaw)
    angle = spawns[0].rotation

    if i == 1:
        b = 0
    else:
        b = 1 
    # Raycast the points onto the ground because BorregasAve is not flat
    hit = sim.raycast(
        npc_origin_pose +  b * pow(i,0) * ( pz * forward) , lgsvl.Vector(0, -1, 0), layer_mask
    )

    # NPC will wait for 0.5 seconds at each waypoint
    wp = lgsvl.DriveWaypoint(
        position = hit.point, 
        speed = speed,
        angle = angle, 
        idle = 0.00001,
        trigger_distance = 15
    )

    

    waypoints.append(wp)


# When the NPC is within 0.5m of the waypoint, this will be called
def on_waypoint(agent, index):
    print("waypoint {} reached".format(index))

# The above function needs to be added to the list of callbacks for the NPC
npc.on_waypoint_reached(on_waypoint)

# The NPC needs to be given the list of waypoints.
# A bool can be passed as the 2nd argument that controls whether or not the NPC loops over the waypoints (default false)
npc.follow(waypoints)


sim.run(0)
